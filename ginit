#! /bin/bash
OLD_IFS=$IFS
IFS=$'\n'

DIRECTORY=~/.ginit

# ----------------------------------------------------------- #
#                      F U N C T I O N S                      #
# =========================================================== #

show_help() {
  echo "Usage: ginit [OPTIONS...] [PROFILE]"
  echo ""
  echo -e "Initializes a git repository in the current directory with the given settings,
which can optionally be saved as a profile.

Profiles are stored in the ~/.ginit/ directory. To remove a profile or any of
its settings, please delete or modify its file."
  echo ""
  echo -e "  -l, --list\t list all profiles and their properties"
  echo -e "  -h, --help\t show this message"
  echo ""
  echo "  -n NAME"
  echo -e "\t sets git config --local user.name"
  echo "  -e EMAIL"
  echo -e "\t sets git config --local user.email"
  echo "  -s HOSTNAME"
  echo -e "\t used to autoconfigure an SSH remote origin; sets 'git remote add origin'
\t to 'git@HOSTNAME:USERNAME/REPOSITORY.git'"
  echo "  -u USERNAME"
  echo -e "\t stores a username associated with git repository service like github,
\t used to configure the SSH remote"
  echo "  -r REPOSITORY"
  echo -e "\t stores the repository name, used to configure the SSH remote"
  exit 0
}

# -----------------------------------------------------------

list_profiles() {
  FILES=$DIRECTORY/*
  if [ ! "$FILES" ]; then
    echo "no files"
    exit 0
  fi
  COL="%-14s %-24s %-28s %-20s %-24s\n"
  printf "$COL" "profile" "user.name" "user.email" "GH username" "SSH hostname"
  printf %110s |tr " " "-"
  printf "\n"
  for f in $FILES
  do
    reset_info
    . "$f"
    printf "$COL" $(basename -- "$f") "$NAME" "$EMAIL" "$GH_USER" "$HOST"
  done
  exit 0
}

# -----------------------------------------------------------

separator() {
  printf %64s |tr " " "_"
  printf "\n\n"
}

# -----------------------------------------------------------

reset_info() {
  PLACEHOLDER=""
  NAME="$PLACEHOLDER"
  EMAIL="$PLACEHOLDER"
  GH_USER="$PLACEHOLDER"
  HOST="$PLACEHOLDER"
}

# -----------------------------------------------------------

# 1: prompt text
# 2: property; shows if exists, prompts for it otherwise
# 3: default value to use for the property, if we must prompt

# takes a prompt string (in other words, a label), an optional
# value for the property, and an optional placeholder value.
# if $2 is given, display it; otherwise prompt the user for a
# value. when prompting, if $3 exists, display it in parens
# and use it as the value if the user enters nothing.
show_or_prompt() {
  PROMPT="$1:"
  if [ "$2" ]; then
    echo "$PROMPT $2" >&2
    echo "$2"
  else
    if [ "$3" ]; then
      PROMPT="$PROMPT ($3)"
    fi
    read -p "$PROMPT " TEMP
    if [ "$TEMP" ]; then
      echo "$TEMP"
    elif [ "$3" ]; then
      echo "$3"
    fi
  fi
}

# -----------------------------------------------------------

# 1: prompt text
# 2: old property
# 3: new property
# 4: placeholder

# called if a profile is found with the name given. if any
# flags are given with new properties, checks the new property
# against the one in the profile and displays the result if
# they are different. otherwise acts just like show_or_prompt.
show_update_or_prompt() {
  if [ ! "$3" ]; then
    show_or_prompt "$1" "$2" "$4"
  elif [[ "$3" = "$2" ]]; then
    echo "$1: $3" >&2
    echo "$3"
  else
    HAS_CHANGED=0
    echo "$1: $2 -> $3" >&2
    echo "$3"
  fi
}

# -----------------------------------------------------------

new_profile() {
  HOST_PRESET=""
  if [ "$PROFILE" ]; then
    HOST_PRESET="$PROFILE.github.com"
  fi
  NAME=$(show_or_prompt "user.name" "$NAME" $(git config --local user.name))
  EMAIL=$(show_or_prompt "user.email" "$EMAIL" $(git config --local user.email))
  GH_USER=$(show_or_prompt "GH username" "$GH_USER" "$PROFILE")
  HOST=$(show_or_prompt "SSH hostname" "$HOST" "$HOST_PRESET")
  
  save_profile
}

# -----------------------------------------------------------

update_profile() {
  # preserve input info so we can override old info
  NEW_NAME="$NAME"
  NEW_EMAIL="$EMAIL"
  NEW_GH_USER="$GH_USER"
  NEW_HOST="$HOST"
  
  # load profile info
  . "$DIRECTORY/$PROFILE"
  
  NAME=$(show_update_or_prompt "user.name" "$NAME" "$NEW_NAME")
  EMAIL=$(show_update_or_prompt "user.email" "$EMAIL" "$NEW_EMAIL")
  GH_USER=$(show_update_or_prompt "GH username" "$GH_USER" "$NEW_GH_USER" "$PROFILE")
  HOST=$(show_update_or_prompt "SSH hostname" "$HOST" "$NEW_HOST" "$PROFILE.github.com")
  
  save_profile
}

# -----------------------------------------------------------

save_profile() {
  printf "" > "$DIRECTORY/$PROFILE"
  if [ "$NAME" ]; then
    echo "NAME=\"$NAME\"" >> "$DIRECTORY/$PROFILE"
  fi
  if [ "$EMAIL" ]; then
    echo "EMAIL=\"$EMAIL\"" >> "$DIRECTORY/$PROFILE"
  fi
  if [ "$GH_USER" ]; then
    echo "GH_USER=\"$GH_USER\"" >> "$DIRECTORY/$PROFILE"
  fi
  if [ "$HOST" ]; then
    echo "HOST=\"$HOST\"" >> "$DIRECTORY/$PROFILE"
  fi
}

# -----------------------------------------------------------

# 1: profile name
profile_exists() {
  if [ -f "$DIRECTORY/$1" ]; then
    true
  else
    false
  fi
}


# ----------------------------------------------------------- #
#                 M A I N   E X E C U T I O N                 #
# =========================================================== #

# ------------------ #
#  CREATE DIRECTORY  #
# ------------------ #

if [ ! -d $DIRECTORY ]; then
  mkdir $DIRECTORY
fi


# -------------- #
#  PROCESS ARGS  #
# -------------- #

while getopts ":li:n:e:s:u:r:h" opt; do
  case $opt in
    l) list_profiles ;;
    n) NAME="$OPTARG" ;;
    e) EMAIL="$OPTARG" ;;
    s) HOST="$OPTARG" ;;
    u) GH_USER="$OPTARG" ;;
    r) REPOSITORY="$OPTARG" ;;
    h) show_help ;;
    \?)
      if [[ "$1" = "--list" ]]; then
        list_profiles
      elif [[ "$1" = "--help" ]]; then
        show_help
      else
        echo "Invalid option: $1" >&2
        show_help
        exit 1
      fi
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
shift $(expr $OPTIND - 1 )


if [ "$1" ]; then
  PROFILE="$1"
else
  read -p "Enter a name to save this profile (optional): " PROFILE
fi

if [ ! "$PROFILE" ]; then
  echo "Will not save configuration."
fi


# ------------------- #
#  CONFIGURE PROFILE  #
# ------------------- #

separator

if profile_exists "$PROFILE"; then
  echo -e "Profile '$PROFILE' found. Loading details...\n"
  update_profile
else
  if [ "$PROFILE" ]; then
    echo -e "Profile \"$PROFILE\" not found. Creating new profile...\n"
  fi
  new_profile
fi

# prompts for setting up remote SSH

if [ "$HOST" ] && [ "$GH_USER" ] && [ ! "$REPOSITORY" ]; then
  echo ""
  read -p "Set up an SSH remote for this repository? (Y/n) " SHOULD_REMOTE
  if [[ "$SHOULD_REMOTE" =~ ^([yY][eE][sS]|[yY])+$ ]] || ! [ "$SHOULD_REMOTE" ];
  then
    REPOSITORY=$(show_or_prompt "Enter the repository name to set up remote SSH" "" $(basename `pwd`))
  fi
fi


# --------------- #
#  CONFIGURE GIT  #
# --------------- #

separator

TEMP="Configuring repository"
if [ "$REPOSITORY" ]; then
  TEMP="$TEMP '$REPOSITORY'"
fi
if [ "$PROFILE" ]; then
  TEMP="$TEMP using profile '$PROFILE'"
fi

echo -e "$TEMP...\n"

git init

if [ "$NAME" ]; then
  git config --local user.name "$NAME"
  echo "Set user.name: $NAME"
fi
if [ "$EMAIL" ]; then
  git config --local user.email "$EMAIL"
  echo "Set user.email: $EMAIL"
fi
if [ "$HOST" ] && [ "$GH_USER" ] && [ "$REPOSITORY" ]; then
  REMOTE="git@$HOST:$GH_USER/$REPOSITORY.git"
  if [[ $(git remote) = "origin" ]]; then
    git remote set-url origin "$REMOTE"
  else
    git remote add origin "$REMOTE"
  fi
  echo "Set remote origin: $REMOTE"
fi

echo -e "\nDone :)\n"

# debug
# echo "PROFILE=$PROFILE | git_NAME=$git_name | git_EMAIL=$git_email | git_USER=$git_user | git_HOST=$git_host | REPOSITORY=$REPOSITORY"
IFS=$OLD_IFS
